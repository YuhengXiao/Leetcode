/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res = 0;
    public int countUnivalSubtrees(TreeNode root) {
        dfs(root);
        return res;
    }
    public void dfs(TreeNode root){
        if (root == null){
            return;
        }
        dfs(root.left);
        if (check(root)){
            res++;
        }
        dfs(root.right);
    }
    public boolean check(TreeNode root){
        if (root == null){
            return true;
        }
        boolean left = true;
        boolean right = true;
        if (root.left != null && root.left.val != root.val){
            return false;
        } else{
            left = check(root.left);
        }
        if (root.right != null && root.right.val != root.val){
            return false;
        } else{
            right = check(root.right);
        }
        return  left && right;
    }
}
