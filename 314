/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        Queue<Integer> index = new LinkedList<Integer>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) return res;
        queue.add(root);
        index.add(0);
        int len = queue.size();
        int minPos = Integer.MAX_VALUE;
        while(!queue.isEmpty()){
            for (int i = 0; i < len; i++){
                TreeNode cur = queue.remove();
                int curIndex = index.remove();
                    if (map.containsKey(curIndex)){
                        List<Integer> lst = map.get(curIndex);
                        lst.add(cur.val);
                        map.put(curIndex, lst);
                    } else{
                        List<Integer> lst = new ArrayList<Integer>();
                        lst.add(cur.val);
                        map.put(curIndex, lst);
                    }
                    if (cur.left != null){
                        queue.add(cur.left);
                        index.add(curIndex - 1);
                    }
                    if (cur.right != null){
                        queue.add(cur.right);
                        index.add(curIndex + 1);
                    }
                    minPos = Math.min(minPos, curIndex);
            }
            len = queue.size();
        }
        for (int i = minPos; i < minPos + map.size(); i++){
            res.add(map.get(i));
        }
        return res;
    }
}
