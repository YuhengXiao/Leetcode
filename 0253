class Solution {
    public int minMeetingRooms(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                if (a[0] == b[0]){
                    return a[1] - b[1];
                } else{
                    return a[0] - b[0];
                }
            }
        });
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                if (a[0] == b[0]){
                    return a[1] - b[1];
                } else{
                    return a[1] - b[1];
                }
            }
        });
        int res = 0;
        for (int i = 0; i < intervals.length; i++){
            if (!pq.isEmpty() && pq.peek()[1] > intervals[i][0]){
                pq.add(intervals[i]);
            } else{
                while(!pq.isEmpty() && pq.peek()[1] <= intervals[i][0]){
                    pq.remove();
                }
                pq.add(intervals[i]);
            }
            res = Math.max(res, pq.size());
        }
        return res;
    }
}
