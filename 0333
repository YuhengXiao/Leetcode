/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res = 0;
    public int largestBSTSubtree(TreeNode root) {
        dfs(root);
        return res;
    }
    public void dfs(TreeNode root){
        if (root == null){
            return;
        }
        dfs(root.left);
        if (check(root, Integer.MAX_VALUE, Integer.MIN_VALUE)){
            res = Math.max(count(root), res);
        }
        dfs(root.right);
    }
    public int count(TreeNode root){
        if (root == null){
            return 0;
        }
        return count(root.left) + count(root.right) + 1;
    }
    public boolean check(TreeNode root, int max, int min){
        if (root == null){
            return true;
        }
        if (root.val >= max || root.val <= min){
            return false;
        }
        return check(root.left, root.val, min) && check(root.right, max, root.val);
    }
}
